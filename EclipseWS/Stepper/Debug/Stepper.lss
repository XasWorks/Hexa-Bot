
Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000081e  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800100  00800100  000008b2  2**0
                  ALLOC
  3 .stab         00002550  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d8  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	3e c0       	rjmp	.+124    	; 0x7e <__ctors_end>
   2:	00 00       	nop
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__bad_interrupt>
   6:	00 00       	nop
   8:	54 c0       	rjmp	.+168    	; 0xb2 <__bad_interrupt>
   a:	00 00       	nop
   c:	52 c0       	rjmp	.+164    	; 0xb2 <__bad_interrupt>
   e:	00 00       	nop
  10:	50 c0       	rjmp	.+160    	; 0xb2 <__bad_interrupt>
  12:	00 00       	nop
  14:	4e c0       	rjmp	.+156    	; 0xb2 <__bad_interrupt>
  16:	00 00       	nop
  18:	4c c0       	rjmp	.+152    	; 0xb2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4a c0       	rjmp	.+148    	; 0xb2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	48 c0       	rjmp	.+144    	; 0xb2 <__bad_interrupt>
  22:	00 00       	nop
  24:	46 c0       	rjmp	.+140    	; 0xb2 <__bad_interrupt>
  26:	00 00       	nop
  28:	44 c0       	rjmp	.+136    	; 0xb2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	42 c0       	rjmp	.+132    	; 0xb2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	40 c0       	rjmp	.+128    	; 0xb2 <__bad_interrupt>
  32:	00 00       	nop
  34:	3e c0       	rjmp	.+124    	; 0xb2 <__bad_interrupt>
  36:	00 00       	nop
  38:	3c c0       	rjmp	.+120    	; 0xb2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3a c0       	rjmp	.+116    	; 0xb2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	38 c0       	rjmp	.+112    	; 0xb2 <__bad_interrupt>
  42:	00 00       	nop
  44:	36 c0       	rjmp	.+108    	; 0xb2 <__bad_interrupt>
  46:	00 00       	nop
  48:	34 c0       	rjmp	.+104    	; 0xb2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	32 c0       	rjmp	.+100    	; 0xb2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	30 c0       	rjmp	.+96     	; 0xb2 <__bad_interrupt>
  52:	00 00       	nop
  54:	2e c0       	rjmp	.+92     	; 0xb2 <__bad_interrupt>
  56:	00 00       	nop
  58:	2c c0       	rjmp	.+88     	; 0xb2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2a c0       	rjmp	.+84     	; 0xb2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	28 c0       	rjmp	.+80     	; 0xb2 <__bad_interrupt>
  62:	00 00       	nop
  64:	26 c0       	rjmp	.+76     	; 0xb2 <__bad_interrupt>
  66:	00 00       	nop
  68:	24 c0       	rjmp	.+72     	; 0xb2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	22 c0       	rjmp	.+68     	; 0xb2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	20 c0       	rjmp	.+64     	; 0xb2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1e c0       	rjmp	.+60     	; 0xb2 <__bad_interrupt>
  76:	00 00       	nop
  78:	1c c0       	rjmp	.+56     	; 0xb2 <__bad_interrupt>
	...

0000007c <__ctors_start>:
  7c:	ef 02       	muls	r30, r31

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d0 e1       	ldi	r29, 0x10	; 16
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>

0000009a <__do_global_ctors>:
  9a:	10 e0       	ldi	r17, 0x00	; 0
  9c:	ce e7       	ldi	r28, 0x7E	; 126
  9e:	d0 e0       	ldi	r29, 0x00	; 0
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <__do_global_ctors+0xe>
  a2:	22 97       	sbiw	r28, 0x02	; 2
  a4:	fe 01       	movw	r30, r28
  a6:	a9 d2       	rcall	.+1362   	; 0x5fa <__tablejump__>
  a8:	cc 37       	cpi	r28, 0x7C	; 124
  aa:	d1 07       	cpc	r29, r17
  ac:	d1 f7       	brne	.-12     	; 0xa2 <__do_global_ctors+0x8>
  ae:	e4 d1       	rcall	.+968    	; 0x478 <main>
  b0:	b4 c3       	rjmp	.+1896   	; 0x81a <_exit>

000000b2 <__bad_interrupt>:
  b2:	a6 cf       	rjmp	.-180    	; 0x0 <__vectors>

000000b4 <_ZL12__iCliRetValv>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
    cli();
  bc:	f8 94       	cli
    return 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <_ZL11__iSeiParamPKh>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 d0       	rcall	.+0      	; 0xcc <_ZL11__iSeiParamPKh+0x6>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	9a 83       	std	Y+2, r25	; 0x02
  d2:	89 83       	std	Y+1, r24	; 0x01
    sei();
  d4:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <_ZN3LCD8readBusyEv>:
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    return 1;
}

  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	00 d0       	rcall	.+0      	; 0xe6 <_ZN3LCD8readBusyEv+0x6>
  e6:	00 d0       	rcall	.+0      	; 0xe8 <_ZN3LCD8readBusyEv+0x8>
  e8:	1f 92       	push	r1
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	9d 83       	std	Y+5, r25	; 0x05
  f0:	8c 83       	std	Y+4, r24	; 0x04
static __inline__ uint8_t __iCliRetVal(void)
  f2:	19 82       	std	Y+1, r1	; 0x01
{
  f4:	1b 82       	std	Y+3, r1	; 0x03
  f6:	de df       	rcall	.-68     	; 0xb4 <_ZL12__iCliRetValv>
  f8:	8a 83       	std	Y+2, r24	; 0x02
  fa:	7e c0       	rjmp	.+252    	; 0x1f8 <_ZN3LCD8readBusyEv+0x118>
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
    cli();
  fe:	9d 81       	ldd	r25, Y+5	; 0x05
 100:	fc 01       	movw	r30, r24
 102:	86 a1       	ldd	r24, Z+38	; 0x26
 104:	97 a1       	ldd	r25, Z+39	; 0x27
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	2c 81       	ldd	r18, Y+4	; 0x04
 10a:	3d 81       	ldd	r19, Y+5	; 0x05
 10c:	f9 01       	movw	r30, r18
 10e:	26 a1       	ldd	r18, Z+38	; 0x26
 110:	37 a1       	ldd	r19, Z+39	; 0x27
 112:	21 50       	subi	r18, 0x01	; 1
 114:	31 09       	sbc	r19, r1
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	27 78       	andi	r18, 0x87	; 135
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
 120:	8c 81       	ldd	r24, Y+4	; 0x04
    return 1;
}
 122:	9d 81       	ldd	r25, Y+5	; 0x05
 124:	fc 01       	movw	r30, r24
 126:	86 a1       	ldd	r24, Z+38	; 0x26
 128:	97 a1       	ldd	r25, Z+39	; 0x27
 12a:	2c 81       	ldd	r18, Y+4	; 0x04
 12c:	3d 81       	ldd	r19, Y+5	; 0x05
 12e:	f9 01       	movw	r30, r18
 130:	26 a1       	ldd	r18, Z+38	; 0x26
 132:	37 a1       	ldd	r19, Z+39	; 0x27
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	22 60       	ori	r18, 0x02	; 2
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	00 00       	nop

 140:	8c 81       	ldd	r24, Y+4	; 0x04
static __inline__ void __iSeiParam(const uint8_t *__s)
 142:	9d 81       	ldd	r25, Y+5	; 0x05
 144:	fc 01       	movw	r30, r24
 146:	86 a1       	ldd	r24, Z+38	; 0x26
 148:	97 a1       	ldd	r25, Z+39	; 0x27
 14a:	2c 81       	ldd	r18, Y+4	; 0x04
 14c:	3d 81       	ldd	r19, Y+5	; 0x05
 14e:	f9 01       	movw	r30, r18
 150:	26 a1       	ldd	r18, Z+38	; 0x26
 152:	37 a1       	ldd	r19, Z+39	; 0x27
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	24 60       	ori	r18, 0x04	; 4
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	00 00       	nop
{
 160:	8c 81       	ldd	r24, Y+4	; 0x04
    sei();
 162:	9d 81       	ldd	r25, Y+5	; 0x05
 164:	fc 01       	movw	r30, r24
 166:	86 a1       	ldd	r24, Z+38	; 0x26
 168:	97 a1       	ldd	r25, Z+39	; 0x27
 16a:	02 97       	sbiw	r24, 0x02	; 2
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	80 74       	andi	r24, 0x40	; 64
 172:	89 83       	std	Y+1, r24	; 0x01
 174:	8c 81       	ldd	r24, Y+4	; 0x04
    __asm__ volatile ("" ::: "memory");
 176:	9d 81       	ldd	r25, Y+5	; 0x05
 178:	fc 01       	movw	r30, r24
 17a:	86 a1       	ldd	r24, Z+38	; 0x26
 17c:	97 a1       	ldd	r25, Z+39	; 0x27
 17e:	2c 81       	ldd	r18, Y+4	; 0x04
 180:	3d 81       	ldd	r19, Y+5	; 0x05
 182:	f9 01       	movw	r30, r18
 184:	26 a1       	ldd	r18, Z+38	; 0x26
 186:	37 a1       	ldd	r19, Z+39	; 0x27
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	2b 7f       	andi	r18, 0xFB	; 251
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
 192:	00 00       	nop
    (void)__s;
}
 194:	8c 81       	ldd	r24, Y+4	; 0x04

static __inline__ void __iCliParam(const uint8_t *__s)
 196:	9d 81       	ldd	r25, Y+5	; 0x05
 198:	fc 01       	movw	r30, r24
 19a:	86 a1       	ldd	r24, Z+38	; 0x26
 19c:	97 a1       	ldd	r25, Z+39	; 0x27
 19e:	2c 81       	ldd	r18, Y+4	; 0x04
 1a0:	3d 81       	ldd	r19, Y+5	; 0x05
 1a2:	f9 01       	movw	r30, r18
 1a4:	26 a1       	ldd	r18, Z+38	; 0x26
 1a6:	37 a1       	ldd	r19, Z+39	; 0x27
 1a8:	f9 01       	movw	r30, r18
 1aa:	20 81       	ld	r18, Z
 1ac:	24 60       	ori	r18, 0x04	; 4
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
 1b2:	00 00       	nop
{
 1b4:	8c 81       	ldd	r24, Y+4	; 0x04
    cli();
 1b6:	9d 81       	ldd	r25, Y+5	; 0x05
 1b8:	fc 01       	movw	r30, r24
 1ba:	86 a1       	ldd	r24, Z+38	; 0x26
 1bc:	97 a1       	ldd	r25, Z+39	; 0x27
 1be:	2c 81       	ldd	r18, Y+4	; 0x04
 1c0:	3d 81       	ldd	r19, Y+5	; 0x05
 1c2:	f9 01       	movw	r30, r18
 1c4:	26 a1       	ldd	r18, Z+38	; 0x26
 1c6:	37 a1       	ldd	r19, Z+39	; 0x27
 1c8:	f9 01       	movw	r30, r18
 1ca:	20 81       	ld	r18, Z
 1cc:	29 7f       	andi	r18, 0xF9	; 249
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
 1d2:	8c 81       	ldd	r24, Y+4	; 0x04
    __asm__ volatile ("" ::: "memory");
    (void)__s;
 1d4:	9d 81       	ldd	r25, Y+5	; 0x05
 1d6:	fc 01       	movw	r30, r24
 1d8:	86 a1       	ldd	r24, Z+38	; 0x26
 1da:	97 a1       	ldd	r25, Z+39	; 0x27
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	2c 81       	ldd	r18, Y+4	; 0x04
 1e0:	3d 81       	ldd	r19, Y+5	; 0x05
 1e2:	f9 01       	movw	r30, r18
 1e4:	26 a1       	ldd	r18, Z+38	; 0x26
 1e6:	37 a1       	ldd	r19, Z+39	; 0x27
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	31 09       	sbc	r19, r1
 1ec:	f9 01       	movw	r30, r18
 1ee:	20 81       	ld	r18, Z
 1f0:	28 67       	ori	r18, 0x78	; 120
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
 1f6:	1a 82       	std	Y+2, r1	; 0x02
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	88 23       	and	r24, r24
 1fc:	09 f0       	breq	.+2      	; 0x200 <_ZN3LCD8readBusyEv+0x120>
 1fe:	7e cf       	rjmp	.-260    	; 0xfc <_ZN3LCD8readBusyEv+0x1c>
 200:	ce 01       	movw	r24, r28
static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
 202:	03 96       	adiw	r24, 0x03	; 3
 204:	60 df       	rcall	.-320    	; 0xc6 <_ZL11__iSeiParamPKh>
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 23       	and	r24, r24

 20a:	11 f4       	brne	.+4      	; 0x210 <_ZN3LCD8readBusyEv+0x130>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	01 c0       	rjmp	.+2      	; 0x212 <_ZN3LCD8readBusyEv+0x132>
static __inline__ void __iRestore(const  uint8_t *__s)
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0f 90       	pop	r0
{
    SREG = *__s;
 214:	0f 90       	pop	r0
    __asm__ volatile ("" ::: "memory");
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <_ZN3LCD13waitWhileBusyEv>:
}
#endif	/* !__DOXYGEN__ */

 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <_ZN3LCD13waitWhileBusyEv+0x6>
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	9a 83       	std	Y+2, r25	; 0x02
 22e:	89 83       	std	Y+1, r24	; 0x01
/** \file */
 230:	00 00       	nop
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	9a 81       	ldd	r25, Y+2	; 0x02
 236:	54 df       	rcall	.-344    	; 0xe0 <_ZN3LCD8readBusyEv>
 238:	98 2f       	mov	r25, r24
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	91 30       	cpi	r25, 0x01	; 1
 23e:	09 f0       	breq	.+2      	; 0x242 <_ZN3LCD13waitWhileBusyEv+0x20>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	88 23       	and	r24, r24
 244:	b1 f7       	brne	.-20     	; 0x232 <_ZN3LCD13waitWhileBusyEv+0x10>
 246:	0f 90       	pop	r0
/** \defgroup util_atomic <util/atomic.h> Atomically and Non-Atomically Executed Code Blocks

 248:	0f 90       	pop	r0
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <_ZN3LCD8pushDataEhh>:
    \code
    #include <util/atomic.h>
    \endcode
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	00 d0       	rcall	.+0      	; 0x256 <_ZN3LCD8pushDataEhh+0x6>
 256:	00 d0       	rcall	.+0      	; 0x258 <_ZN3LCD8pushDataEhh+0x8>
 258:	00 d0       	rcall	.+0      	; 0x25a <_ZN3LCD8pushDataEhh+0xa>
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	9c 83       	std	Y+4, r25	; 0x04
 260:	8b 83       	std	Y+3, r24	; 0x03
 262:	6d 83       	std	Y+5, r22	; 0x05
 264:	4e 83       	std	Y+6, r20	; 0x06

 266:	1a 82       	std	Y+2, r1	; 0x02
 268:	25 df       	rcall	.-438    	; 0xb4 <_ZL12__iCliRetValv>
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	5d c0       	rjmp	.+186    	; 0x328 <_ZN3LCD8pushDataEhh+0xd8>
 26e:	00 00       	nop
    \note The macros in this header file require the ISO/IEC 9899:1999
    ("ISO C99") feature of for loop variables that are declared inside
 270:	8b 81       	ldd	r24, Y+3	; 0x03
    the for loop itself.  For that reason, this header file can only
 272:	9c 81       	ldd	r25, Y+4	; 0x04
 274:	fc 01       	movw	r30, r24
 276:	86 a1       	ldd	r24, Z+38	; 0x26
 278:	97 a1       	ldd	r25, Z+39	; 0x27
 27a:	2b 81       	ldd	r18, Y+3	; 0x03
 27c:	3c 81       	ldd	r19, Y+4	; 0x04
 27e:	f9 01       	movw	r30, r18
 280:	26 a1       	ldd	r18, Z+38	; 0x26
 282:	37 a1       	ldd	r19, Z+39	; 0x27
 284:	f9 01       	movw	r30, r18
 286:	40 81       	ld	r20, Z
 288:	2d 81       	ldd	r18, Y+5	; 0x05
 28a:	22 95       	swap	r18
 28c:	2f 70       	andi	r18, 0x0F	; 15
 28e:	22 2f       	mov	r18, r18
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	33 27       	eor	r19, r19
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	32 2f       	mov	r19, r18
 2a2:	2e 81       	ldd	r18, Y+6	; 0x06
 2a4:	23 2b       	or	r18, r19
 2a6:	24 2b       	or	r18, r20
 2a8:	24 60       	ori	r18, 0x04	; 4
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
 2ae:	00 00       	nop
    be used if the standard level of the compiler (option --std=) is
 2b0:	8b 81       	ldd	r24, Y+3	; 0x03
    set to either \c c99 or \c gnu99.
 2b2:	9c 81       	ldd	r25, Y+4	; 0x04
 2b4:	fc 01       	movw	r30, r24
 2b6:	86 a1       	ldd	r24, Z+38	; 0x26
 2b8:	97 a1       	ldd	r25, Z+39	; 0x27
 2ba:	2b 81       	ldd	r18, Y+3	; 0x03
 2bc:	3c 81       	ldd	r19, Y+4	; 0x04
 2be:	f9 01       	movw	r30, r18
 2c0:	26 a1       	ldd	r18, Z+38	; 0x26
 2c2:	37 a1       	ldd	r19, Z+39	; 0x27
 2c4:	f9 01       	movw	r30, r18
 2c6:	20 81       	ld	r18, Z
 2c8:	23 78       	andi	r18, 0x83	; 131
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
 2ce:	00 00       	nop

    The macros in this header file deal with code blocks that are
    guaranteed to be excuted Atomically or Non-Atmomically.  The term
 2d0:	8b 81       	ldd	r24, Y+3	; 0x03
    "Atomic" in this context refers to the unability of the respective
 2d2:	9c 81       	ldd	r25, Y+4	; 0x04
 2d4:	fc 01       	movw	r30, r24
 2d6:	86 a1       	ldd	r24, Z+38	; 0x26
 2d8:	97 a1       	ldd	r25, Z+39	; 0x27
 2da:	2b 81       	ldd	r18, Y+3	; 0x03
 2dc:	3c 81       	ldd	r19, Y+4	; 0x04
 2de:	f9 01       	movw	r30, r18
 2e0:	26 a1       	ldd	r18, Z+38	; 0x26
 2e2:	37 a1       	ldd	r19, Z+39	; 0x27
 2e4:	f9 01       	movw	r30, r18
 2e6:	40 81       	ld	r20, Z
 2e8:	2d 81       	ldd	r18, Y+5	; 0x05
 2ea:	22 2f       	mov	r18, r18
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	2f 70       	andi	r18, 0x0F	; 15
 2f0:	33 27       	eor	r19, r19
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	24 2b       	or	r18, r20
 300:	24 60       	ori	r18, 0x04	; 4
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
 306:	00 00       	nop
    code to be interrupted.
 308:	8b 81       	ldd	r24, Y+3	; 0x03

 30a:	9c 81       	ldd	r25, Y+4	; 0x04
 30c:	fc 01       	movw	r30, r24
 30e:	86 a1       	ldd	r24, Z+38	; 0x26
 310:	97 a1       	ldd	r25, Z+39	; 0x27
 312:	2b 81       	ldd	r18, Y+3	; 0x03
 314:	3c 81       	ldd	r19, Y+4	; 0x04
 316:	f9 01       	movw	r30, r18
 318:	26 a1       	ldd	r18, Z+38	; 0x26
 31a:	37 a1       	ldd	r19, Z+39	; 0x27
 31c:	f9 01       	movw	r30, r18
 31e:	20 81       	ld	r18, Z
 320:	22 78       	andi	r18, 0x82	; 130
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
 326:	19 82       	std	Y+1, r1	; 0x01
/** \defgroup util_atomic <util/atomic.h> Atomically and Non-Atomically Executed Code Blocks

    \code
    #include <util/atomic.h>
    \endcode

 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	88 23       	and	r24, r24
 32c:	09 f0       	breq	.+2      	; 0x330 <_ZN3LCD8pushDataEhh+0xe0>
 32e:	9f cf       	rjmp	.-194    	; 0x26e <_ZN3LCD8pushDataEhh+0x1e>
 330:	ce 01       	movw	r24, r28
    The macros in this header file deal with code blocks that are
    guaranteed to be excuted Atomically or Non-Atmomically.  The term
    "Atomic" in this context refers to the unability of the respective
    code to be interrupted.

    These macros operate via automatic manipulation of the Global
 332:	02 96       	adiw	r24, 0x02	; 2
 334:	c8 de       	rcall	.-624    	; 0xc6 <_ZL11__iSeiParamPKh>
 336:	26 96       	adiw	r28, 0x06	; 6
 338:	0f b6       	in	r0, 0x3f	; 63
    Interrupt Status (I) bit of the SREG register. Exit paths from
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <_ZN3LCDC1EPVh>:
    ISR.  While declaring such a variable as volatile ensures that the
    compiler will not optimize accesses to it away, it does not
    guarantee atomic access to it.  Assuming the following example:

    \code
#include <inttypes.h>
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <_ZN3LCDC1EPVh+0x6>
 34e:	00 d0       	rcall	.+0      	; 0x350 <_ZN3LCDC1EPVh+0x8>
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	9a 83       	std	Y+2, r25	; 0x02
 356:	89 83       	std	Y+1, r24	; 0x01
 358:	7c 83       	std	Y+4, r23	; 0x04
 35a:	6b 83       	std	Y+3, r22	; 0x03
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	9a 81       	ldd	r25, Y+2	; 0x02
 360:	20 e2       	ldi	r18, 0x20	; 32
 362:	fc 01       	movw	r30, r24
 364:	32 2f       	mov	r19, r18
 366:	11 92       	st	Z+, r1
 368:	3a 95       	dec	r19
 36a:	e9 f7       	brne	.-6      	; 0x366 <_ZN3LCDC1EPVh+0x1e>
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	9a 81       	ldd	r25, Y+2	; 0x02
 370:	fc 01       	movw	r30, r24
 372:	10 a2       	std	Z+32, r1	; 0x20
 374:	11 a2       	std	Z+33, r1	; 0x21
 376:	12 a2       	std	Z+34, r1	; 0x22
 378:	13 a2       	std	Z+35, r1	; 0x23
#include <avr/interrupt.h>
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	2b 81       	ldd	r18, Y+3	; 0x03
 380:	3c 81       	ldd	r19, Y+4	; 0x04
 382:	fc 01       	movw	r30, r24
 384:	37 a3       	std	Z+39, r19	; 0x27
 386:	26 a3       	std	Z+38, r18	; 0x26
#include <avr/io.h>
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	9a 81       	ldd	r25, Y+2	; 0x02
 38c:	fc 01       	movw	r30, r24
 38e:	14 a2       	std	Z+36, r1	; 0x24

 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	9a 81       	ldd	r25, Y+2	; 0x02
 394:	fc 01       	movw	r30, r24
 396:	15 a2       	std	Z+37, r1	; 0x25
volatile uint16_t ctr;

 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	9a 81       	ldd	r25, Y+2	; 0x02
 39c:	fc 01       	movw	r30, r24
 39e:	86 a1       	ldd	r24, Z+38	; 0x26
 3a0:	97 a1       	ldd	r25, Z+39	; 0x27
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	29 81       	ldd	r18, Y+1	; 0x01
 3a6:	3a 81       	ldd	r19, Y+2	; 0x02
 3a8:	f9 01       	movw	r30, r18
 3aa:	26 a1       	ldd	r18, Z+38	; 0x26
 3ac:	37 a1       	ldd	r19, Z+39	; 0x27
 3ae:	21 50       	subi	r18, 0x01	; 1
 3b0:	31 09       	sbc	r19, r1
 3b2:	f9 01       	movw	r30, r18
 3b4:	20 81       	ld	r18, Z
 3b6:	2f 67       	ori	r18, 0x7F	; 127
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
ISR(TIMER1_OVF_vect)
{
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	9a 81       	ldd	r25, Y+2	; 0x02
 3c0:	fc 01       	movw	r30, r24
 3c2:	86 a1       	ldd	r24, Z+38	; 0x26
 3c4:	97 a1       	ldd	r25, Z+39	; 0x27
 3c6:	29 81       	ldd	r18, Y+1	; 0x01
 3c8:	3a 81       	ldd	r19, Y+2	; 0x02
 3ca:	f9 01       	movw	r30, r18
 3cc:	26 a1       	ldd	r18, Z+38	; 0x26
 3ce:	37 a1       	ldd	r19, Z+39	; 0x27
 3d0:	f9 01       	movw	r30, r18
 3d2:	20 81       	ld	r18, Z
 3d4:	2c 61       	ori	r18, 0x1C	; 28
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
  ctr--;
 3da:	00 00       	nop
}
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	9a 81       	ldd	r25, Y+2	; 0x02
 3e0:	fc 01       	movw	r30, r24
 3e2:	86 a1       	ldd	r24, Z+38	; 0x26
 3e4:	97 a1       	ldd	r25, Z+39	; 0x27
 3e6:	29 81       	ldd	r18, Y+1	; 0x01
 3e8:	3a 81       	ldd	r19, Y+2	; 0x02
 3ea:	f9 01       	movw	r30, r18
 3ec:	26 a1       	ldd	r18, Z+38	; 0x26
 3ee:	37 a1       	ldd	r19, Z+39	; 0x27
 3f0:	f9 01       	movw	r30, r18
 3f2:	20 81       	ld	r18, Z
 3f4:	23 7f       	andi	r18, 0xF3	; 243
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18

 3fa:	00 00       	nop
...
int
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	fc 01       	movw	r30, r24
 402:	86 a1       	ldd	r24, Z+38	; 0x26
 404:	97 a1       	ldd	r25, Z+39	; 0x27
 406:	29 81       	ldd	r18, Y+1	; 0x01
 408:	3a 81       	ldd	r19, Y+2	; 0x02
 40a:	f9 01       	movw	r30, r18
 40c:	26 a1       	ldd	r18, Z+38	; 0x26
 40e:	37 a1       	ldd	r19, Z+39	; 0x27
 410:	f9 01       	movw	r30, r18
 412:	20 81       	ld	r18, Z
 414:	24 60       	ori	r18, 0x04	; 4
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
main(void)
 41a:	00 00       	nop
{
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	9a 81       	ldd	r25, Y+2	; 0x02
 420:	fc 01       	movw	r30, r24
 422:	86 a1       	ldd	r24, Z+38	; 0x26
 424:	97 a1       	ldd	r25, Z+39	; 0x27
 426:	29 81       	ldd	r18, Y+1	; 0x01
 428:	3a 81       	ldd	r19, Y+2	; 0x02
 42a:	f9 01       	movw	r30, r18
 42c:	26 a1       	ldd	r18, Z+38	; 0x26
 42e:	37 a1       	ldd	r19, Z+39	; 0x27
 430:	f9 01       	movw	r30, r18
 432:	20 81       	ld	r18, Z
 434:	23 7f       	andi	r18, 0xF3	; 243
 436:	fc 01       	movw	r30, r24
 438:	20 83       	st	Z, r18
   ...
   ctr = 0x200;
   start_timer();
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	9a 81       	ldd	r25, Y+2	; 0x02
 43e:	f1 de       	rcall	.-542    	; 0x222 <_ZN3LCD13waitWhileBusyEv>
 440:	89 81       	ldd	r24, Y+1	; 0x01
   while (ctr != 0)
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	68 e2       	ldi	r22, 0x28	; 40
 448:	03 df       	rcall	.-506    	; 0x250 <_ZN3LCD8pushDataEhh>
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
     // wait
 44e:	e9 de       	rcall	.-558    	; 0x222 <_ZN3LCD13waitWhileBusyEv>
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	9a 81       	ldd	r25, Y+2	; 0x02
 454:	40 e0       	ldi	r20, 0x00	; 0
       ;
 456:	6c e0       	ldi	r22, 0x0C	; 12
 458:	fb de       	rcall	.-522    	; 0x250 <_ZN3LCD8pushDataEhh>
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	e1 de       	rcall	.-574    	; 0x222 <_ZN3LCD13waitWhileBusyEv>
 460:	89 81       	ldd	r24, Y+1	; 0x01
   ...
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	f3 de       	rcall	.-538    	; 0x250 <_ZN3LCD8pushDataEhh>
}
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
    \endcode
 476:	08 95       	ret

00000478 <main>:

#include "Code/LCD.h"

LCD disp(&PORTA);

int main() {
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	2e 97       	sbiw	r28, 0x0e	; 14
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
	DDRD |= 1;
 48c:	8a e2       	ldi	r24, 0x2A	; 42
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	2a e2       	ldi	r18, 0x2A	; 42
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	f9 01       	movw	r30, r18
 496:	20 81       	ld	r18, Z
 498:	21 60       	ori	r18, 0x01	; 1
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	a0 e8       	ldi	r26, 0x80	; 128
 4a4:	bf e3       	ldi	r27, 0x3F	; 63
 4a6:	89 83       	std	Y+1, r24	; 0x01
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	ab 83       	std	Y+3, r26	; 0x03
 4ac:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	4a e7       	ldi	r20, 0x7A	; 122
 4b4:	55 e4       	ldi	r21, 0x45	; 69
 4b6:	69 81       	ldd	r22, Y+1	; 0x01
 4b8:	7a 81       	ldd	r23, Y+2	; 0x02
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	9c 81       	ldd	r25, Y+4	; 0x04
 4be:	22 d1       	rcall	.+580    	; 0x704 <__mulsf3>
 4c0:	dc 01       	movw	r26, r24
 4c2:	cb 01       	movw	r24, r22
 4c4:	8d 83       	std	Y+5, r24	; 0x05
 4c6:	9e 83       	std	Y+6, r25	; 0x06
 4c8:	af 83       	std	Y+7, r26	; 0x07
 4ca:	b8 87       	std	Y+8, r27	; 0x08
 4cc:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	40 e8       	ldi	r20, 0x80	; 128
 4d2:	5f e3       	ldi	r21, 0x3F	; 63
 4d4:	6d 81       	ldd	r22, Y+5	; 0x05
 4d6:	7e 81       	ldd	r23, Y+6	; 0x06
 4d8:	8f 81       	ldd	r24, Y+7	; 0x07
 4da:	98 85       	ldd	r25, Y+8	; 0x08
 4dc:	92 d0       	rcall	.+292    	; 0x602 <__cmpsf2>
 4de:	88 23       	and	r24, r24
 4e0:	2c f4       	brge	.+10     	; 0x4ec <main+0x74>
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
 4e6:	9a 87       	std	Y+10, r25	; 0x0a
 4e8:	89 87       	std	Y+9, r24	; 0x09
 4ea:	3b c0       	rjmp	.+118    	; 0x562 <main+0xea>
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
 4f0:	4f e7       	ldi	r20, 0x7F	; 127
 4f2:	57 e4       	ldi	r21, 0x47	; 71
 4f4:	6d 81       	ldd	r22, Y+5	; 0x05
 4f6:	7e 81       	ldd	r23, Y+6	; 0x06
 4f8:	8f 81       	ldd	r24, Y+7	; 0x07
 4fa:	98 85       	ldd	r25, Y+8	; 0x08
 4fc:	ff d0       	rcall	.+510    	; 0x6fc <__gesf2>
 4fe:	18 16       	cp	r1, r24
 500:	3c f5       	brge	.+78     	; 0x550 <main+0xd8>
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 508:	51 e4       	ldi	r21, 0x41	; 65
 50a:	69 81       	ldd	r22, Y+1	; 0x01
 50c:	7a 81       	ldd	r23, Y+2	; 0x02
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	9c 81       	ldd	r25, Y+4	; 0x04
 512:	f8 d0       	rcall	.+496    	; 0x704 <__mulsf3>
 514:	dc 01       	movw	r26, r24
 516:	cb 01       	movw	r24, r22
 518:	bc 01       	movw	r22, r24
 51a:	cd 01       	movw	r24, r26
 51c:	76 d0       	rcall	.+236    	; 0x60a <__fixunssfsi>
 51e:	dc 01       	movw	r26, r24
 520:	cb 01       	movw	r24, r22
 522:	9a 87       	std	Y+10, r25	; 0x0a
 524:	89 87       	std	Y+9, r24	; 0x09
 526:	0f c0       	rjmp	.+30     	; 0x546 <main+0xce>
 528:	80 e9       	ldi	r24, 0x90	; 144
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	9c 87       	std	Y+12, r25	; 0x0c
 52e:	8b 87       	std	Y+11, r24	; 0x0b
 530:	8b 85       	ldd	r24, Y+11	; 0x0b
 532:	9c 85       	ldd	r25, Y+12	; 0x0c
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <main+0xbc>
 538:	9c 87       	std	Y+12, r25	; 0x0c
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 53a:	8b 87       	std	Y+11, r24	; 0x0b
 53c:	89 85       	ldd	r24, Y+9	; 0x09
 53e:	9a 85       	ldd	r25, Y+10	; 0x0a
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	9a 87       	std	Y+10, r25	; 0x0a
 544:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 546:	89 85       	ldd	r24, Y+9	; 0x09
 548:	9a 85       	ldd	r25, Y+10	; 0x0a
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	69 f7       	brne	.-38     	; 0x528 <main+0xb0>
 54e:	13 c0       	rjmp	.+38     	; 0x576 <main+0xfe>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 550:	6d 81       	ldd	r22, Y+5	; 0x05
 552:	7e 81       	ldd	r23, Y+6	; 0x06
 554:	8f 81       	ldd	r24, Y+7	; 0x07
 556:	98 85       	ldd	r25, Y+8	; 0x08
 558:	58 d0       	rcall	.+176    	; 0x60a <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 55a:	dc 01       	movw	r26, r24
 55c:	cb 01       	movw	r24, r22
 55e:	9a 87       	std	Y+10, r25	; 0x0a
 560:	89 87       	std	Y+9, r24	; 0x09
 562:	89 85       	ldd	r24, Y+9	; 0x09
 564:	9a 85       	ldd	r25, Y+10	; 0x0a
 566:	9e 87       	std	Y+14, r25	; 0x0e
 568:	8d 87       	std	Y+13, r24	; 0x0d
 56a:	8d 85       	ldd	r24, Y+13	; 0x0d
 56c:	9e 85       	ldd	r25, Y+14	; 0x0e
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <main+0xf6>
 572:	9e 87       	std	Y+14, r25	; 0x0e
 574:	8d 87       	std	Y+13, r24	; 0x0d
 576:	8b e2       	ldi	r24, 0x2B	; 43
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	2b e2       	ldi	r18, 0x2B	; 43
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	f9 01       	movw	r30, r18
 580:	20 81       	ld	r18, Z

	while(true) {
		_delay_ms(1);
		PORTD |= (1);
 582:	21 60       	ori	r18, 0x01	; 1
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
 588:	8b e2       	ldi	r24, 0x2B	; 43
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	2b e2       	ldi	r18, 0x2B	; 43
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	20 81       	ld	r18, Z
		PORTD &= ~(1);
 594:	2e 7f       	andi	r18, 0xFE	; 254
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
 59a:	81 cf       	rjmp	.-254    	; 0x49e <main+0x26>

0000059c <_Z41__static_initialization_and_destruction_0ii>:
	}

	return 0;
}
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	00 d0       	rcall	.+0      	; 0x5a2 <_Z41__static_initialization_and_destruction_0ii+0x6>
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <_Z41__static_initialization_and_destruction_0ii+0x8>
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	9a 83       	std	Y+2, r25	; 0x02
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	7c 83       	std	Y+4, r23	; 0x04
 5ae:	6b 83       	std	Y+3, r22	; 0x03
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	9a 81       	ldd	r25, Y+2	; 0x02
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	91 05       	cpc	r25, r1
 5b8:	59 f4       	brne	.+22     	; 0x5d0 <_Z41__static_initialization_and_destruction_0ii+0x34>
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	9c 81       	ldd	r25, Y+4	; 0x04
 5be:	8f 3f       	cpi	r24, 0xFF	; 255
 5c0:	2f ef       	ldi	r18, 0xFF	; 255
 5c2:	92 07       	cpc	r25, r18
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <_Z41__static_initialization_and_destruction_0ii+0x34>
#include <avr/interrupt.h>
#include <util/delay.h>

#include "Code/LCD.h"

LCD disp(&PORTA);
 5c6:	62 e2       	ldi	r22, 0x22	; 34
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	bc de       	rcall	.-648    	; 0x348 <_ZN3LCDC1EPVh>
 5d0:	0f 90       	pop	r0
		PORTD |= (1);
		PORTD &= ~(1);
	}

	return 0;
}
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <_GLOBAL__sub_I_disp>:
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	6f ef       	ldi	r22, 0xFF	; 255
 5e8:	7f ef       	ldi	r23, 0xFF	; 255
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	d6 df       	rcall	.-84     	; 0x59c <_Z41__static_initialization_and_destruction_0ii>
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <__tablejump2__>:
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31

000005fa <__tablejump__>:
 5fa:	05 90       	lpm	r0, Z+
 5fc:	f4 91       	lpm	r31, Z
 5fe:	e0 2d       	mov	r30, r0
 600:	09 94       	ijmp

00000602 <__cmpsf2>:
 602:	2f d0       	rcall	.+94     	; 0x662 <__fp_cmp>
 604:	08 f4       	brcc	.+2      	; 0x608 <__cmpsf2+0x6>
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	08 95       	ret

0000060a <__fixunssfsi>:
 60a:	57 d0       	rcall	.+174    	; 0x6ba <__fp_splitA>
 60c:	88 f0       	brcs	.+34     	; 0x630 <__fixunssfsi+0x26>
 60e:	9f 57       	subi	r25, 0x7F	; 127
 610:	90 f0       	brcs	.+36     	; 0x636 <__fixunssfsi+0x2c>
 612:	b9 2f       	mov	r27, r25
 614:	99 27       	eor	r25, r25
 616:	b7 51       	subi	r27, 0x17	; 23
 618:	a0 f0       	brcs	.+40     	; 0x642 <__fixunssfsi+0x38>
 61a:	d1 f0       	breq	.+52     	; 0x650 <__fixunssfsi+0x46>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	1a f0       	brmi	.+6      	; 0x62c <__fixunssfsi+0x22>
 626:	ba 95       	dec	r27
 628:	c9 f7       	brne	.-14     	; 0x61c <__fixunssfsi+0x12>
 62a:	12 c0       	rjmp	.+36     	; 0x650 <__fixunssfsi+0x46>
 62c:	b1 30       	cpi	r27, 0x01	; 1
 62e:	81 f0       	breq	.+32     	; 0x650 <__fixunssfsi+0x46>
 630:	5e d0       	rcall	.+188    	; 0x6ee <__fp_zero>
 632:	b1 e0       	ldi	r27, 0x01	; 1
 634:	08 95       	ret
 636:	5b c0       	rjmp	.+182    	; 0x6ee <__fp_zero>
 638:	67 2f       	mov	r22, r23
 63a:	78 2f       	mov	r23, r24
 63c:	88 27       	eor	r24, r24
 63e:	b8 5f       	subi	r27, 0xF8	; 248
 640:	39 f0       	breq	.+14     	; 0x650 <__fixunssfsi+0x46>
 642:	b9 3f       	cpi	r27, 0xF9	; 249
 644:	cc f3       	brlt	.-14     	; 0x638 <__fixunssfsi+0x2e>
 646:	86 95       	lsr	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b3 95       	inc	r27
 64e:	d9 f7       	brne	.-10     	; 0x646 <__fixunssfsi+0x3c>
 650:	3e f4       	brtc	.+14     	; 0x660 <__fixunssfsi+0x56>
 652:	90 95       	com	r25
 654:	80 95       	com	r24
 656:	70 95       	com	r23
 658:	61 95       	neg	r22
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	08 95       	ret

00000662 <__fp_cmp>:
 662:	99 0f       	add	r25, r25
 664:	00 08       	sbc	r0, r0
 666:	55 0f       	add	r21, r21
 668:	aa 0b       	sbc	r26, r26
 66a:	e0 e8       	ldi	r30, 0x80	; 128
 66c:	fe ef       	ldi	r31, 0xFE	; 254
 66e:	16 16       	cp	r1, r22
 670:	17 06       	cpc	r1, r23
 672:	e8 07       	cpc	r30, r24
 674:	f9 07       	cpc	r31, r25
 676:	c0 f0       	brcs	.+48     	; 0x6a8 <__fp_cmp+0x46>
 678:	12 16       	cp	r1, r18
 67a:	13 06       	cpc	r1, r19
 67c:	e4 07       	cpc	r30, r20
 67e:	f5 07       	cpc	r31, r21
 680:	98 f0       	brcs	.+38     	; 0x6a8 <__fp_cmp+0x46>
 682:	62 1b       	sub	r22, r18
 684:	73 0b       	sbc	r23, r19
 686:	84 0b       	sbc	r24, r20
 688:	95 0b       	sbc	r25, r21
 68a:	39 f4       	brne	.+14     	; 0x69a <__fp_cmp+0x38>
 68c:	0a 26       	eor	r0, r26
 68e:	61 f0       	breq	.+24     	; 0x6a8 <__fp_cmp+0x46>
 690:	23 2b       	or	r18, r19
 692:	24 2b       	or	r18, r20
 694:	25 2b       	or	r18, r21
 696:	21 f4       	brne	.+8      	; 0x6a0 <__fp_cmp+0x3e>
 698:	08 95       	ret
 69a:	0a 26       	eor	r0, r26
 69c:	09 f4       	brne	.+2      	; 0x6a0 <__fp_cmp+0x3e>
 69e:	a1 40       	sbci	r26, 0x01	; 1
 6a0:	a6 95       	lsr	r26
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	81 1d       	adc	r24, r1
 6a6:	81 1d       	adc	r24, r1
 6a8:	08 95       	ret

000006aa <__fp_split3>:
 6aa:	57 fd       	sbrc	r21, 7
 6ac:	90 58       	subi	r25, 0x80	; 128
 6ae:	44 0f       	add	r20, r20
 6b0:	55 1f       	adc	r21, r21
 6b2:	59 f0       	breq	.+22     	; 0x6ca <__fp_splitA+0x10>
 6b4:	5f 3f       	cpi	r21, 0xFF	; 255
 6b6:	71 f0       	breq	.+28     	; 0x6d4 <__fp_splitA+0x1a>
 6b8:	47 95       	ror	r20

000006ba <__fp_splitA>:
 6ba:	88 0f       	add	r24, r24
 6bc:	97 fb       	bst	r25, 7
 6be:	99 1f       	adc	r25, r25
 6c0:	61 f0       	breq	.+24     	; 0x6da <__fp_splitA+0x20>
 6c2:	9f 3f       	cpi	r25, 0xFF	; 255
 6c4:	79 f0       	breq	.+30     	; 0x6e4 <__fp_splitA+0x2a>
 6c6:	87 95       	ror	r24
 6c8:	08 95       	ret
 6ca:	12 16       	cp	r1, r18
 6cc:	13 06       	cpc	r1, r19
 6ce:	14 06       	cpc	r1, r20
 6d0:	55 1f       	adc	r21, r21
 6d2:	f2 cf       	rjmp	.-28     	; 0x6b8 <__fp_split3+0xe>
 6d4:	46 95       	lsr	r20
 6d6:	f1 df       	rcall	.-30     	; 0x6ba <__fp_splitA>
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <__fp_splitA+0x30>
 6da:	16 16       	cp	r1, r22
 6dc:	17 06       	cpc	r1, r23
 6de:	18 06       	cpc	r1, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	f1 cf       	rjmp	.-30     	; 0x6c6 <__fp_splitA+0xc>
 6e4:	86 95       	lsr	r24
 6e6:	71 05       	cpc	r23, r1
 6e8:	61 05       	cpc	r22, r1
 6ea:	08 94       	sec
 6ec:	08 95       	ret

000006ee <__fp_zero>:
 6ee:	e8 94       	clt

000006f0 <__fp_szero>:
 6f0:	bb 27       	eor	r27, r27
 6f2:	66 27       	eor	r22, r22
 6f4:	77 27       	eor	r23, r23
 6f6:	cb 01       	movw	r24, r22
 6f8:	97 f9       	bld	r25, 7
 6fa:	08 95       	ret

000006fc <__gesf2>:
 6fc:	b2 df       	rcall	.-156    	; 0x662 <__fp_cmp>
 6fe:	08 f4       	brcc	.+2      	; 0x702 <__gesf2+0x6>
 700:	8f ef       	ldi	r24, 0xFF	; 255
 702:	08 95       	ret

00000704 <__mulsf3>:
 704:	0b d0       	rcall	.+22     	; 0x71c <__mulsf3x>
 706:	78 c0       	rjmp	.+240    	; 0x7f8 <__fp_round>
 708:	69 d0       	rcall	.+210    	; 0x7dc <__fp_pscA>
 70a:	28 f0       	brcs	.+10     	; 0x716 <__mulsf3+0x12>
 70c:	6e d0       	rcall	.+220    	; 0x7ea <__fp_pscB>
 70e:	18 f0       	brcs	.+6      	; 0x716 <__mulsf3+0x12>
 710:	95 23       	and	r25, r21
 712:	09 f0       	breq	.+2      	; 0x716 <__mulsf3+0x12>
 714:	5a c0       	rjmp	.+180    	; 0x7ca <__fp_inf>
 716:	5f c0       	rjmp	.+190    	; 0x7d6 <__fp_nan>
 718:	11 24       	eor	r1, r1
 71a:	ea cf       	rjmp	.-44     	; 0x6f0 <__fp_szero>

0000071c <__mulsf3x>:
 71c:	c6 df       	rcall	.-116    	; 0x6aa <__fp_split3>
 71e:	a0 f3       	brcs	.-24     	; 0x708 <__mulsf3+0x4>

00000720 <__mulsf3_pse>:
 720:	95 9f       	mul	r25, r21
 722:	d1 f3       	breq	.-12     	; 0x718 <__mulsf3+0x14>
 724:	95 0f       	add	r25, r21
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	55 1f       	adc	r21, r21
 72a:	62 9f       	mul	r22, r18
 72c:	f0 01       	movw	r30, r0
 72e:	72 9f       	mul	r23, r18
 730:	bb 27       	eor	r27, r27
 732:	f0 0d       	add	r31, r0
 734:	b1 1d       	adc	r27, r1
 736:	63 9f       	mul	r22, r19
 738:	aa 27       	eor	r26, r26
 73a:	f0 0d       	add	r31, r0
 73c:	b1 1d       	adc	r27, r1
 73e:	aa 1f       	adc	r26, r26
 740:	64 9f       	mul	r22, r20
 742:	66 27       	eor	r22, r22
 744:	b0 0d       	add	r27, r0
 746:	a1 1d       	adc	r26, r1
 748:	66 1f       	adc	r22, r22
 74a:	82 9f       	mul	r24, r18
 74c:	22 27       	eor	r18, r18
 74e:	b0 0d       	add	r27, r0
 750:	a1 1d       	adc	r26, r1
 752:	62 1f       	adc	r22, r18
 754:	73 9f       	mul	r23, r19
 756:	b0 0d       	add	r27, r0
 758:	a1 1d       	adc	r26, r1
 75a:	62 1f       	adc	r22, r18
 75c:	83 9f       	mul	r24, r19
 75e:	a0 0d       	add	r26, r0
 760:	61 1d       	adc	r22, r1
 762:	22 1f       	adc	r18, r18
 764:	74 9f       	mul	r23, r20
 766:	33 27       	eor	r19, r19
 768:	a0 0d       	add	r26, r0
 76a:	61 1d       	adc	r22, r1
 76c:	23 1f       	adc	r18, r19
 76e:	84 9f       	mul	r24, r20
 770:	60 0d       	add	r22, r0
 772:	21 1d       	adc	r18, r1
 774:	82 2f       	mov	r24, r18
 776:	76 2f       	mov	r23, r22
 778:	6a 2f       	mov	r22, r26
 77a:	11 24       	eor	r1, r1
 77c:	9f 57       	subi	r25, 0x7F	; 127
 77e:	50 40       	sbci	r21, 0x00	; 0
 780:	8a f0       	brmi	.+34     	; 0x7a4 <__mulsf3_pse+0x84>
 782:	e1 f0       	breq	.+56     	; 0x7bc <__mulsf3_pse+0x9c>
 784:	88 23       	and	r24, r24
 786:	4a f0       	brmi	.+18     	; 0x79a <__mulsf3_pse+0x7a>
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	bb 1f       	adc	r27, r27
 78e:	66 1f       	adc	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	91 50       	subi	r25, 0x01	; 1
 796:	50 40       	sbci	r21, 0x00	; 0
 798:	a9 f7       	brne	.-22     	; 0x784 <__mulsf3_pse+0x64>
 79a:	9e 3f       	cpi	r25, 0xFE	; 254
 79c:	51 05       	cpc	r21, r1
 79e:	70 f0       	brcs	.+28     	; 0x7bc <__mulsf3_pse+0x9c>
 7a0:	14 c0       	rjmp	.+40     	; 0x7ca <__fp_inf>
 7a2:	a6 cf       	rjmp	.-180    	; 0x6f0 <__fp_szero>
 7a4:	5f 3f       	cpi	r21, 0xFF	; 255
 7a6:	ec f3       	brlt	.-6      	; 0x7a2 <__mulsf3_pse+0x82>
 7a8:	98 3e       	cpi	r25, 0xE8	; 232
 7aa:	dc f3       	brlt	.-10     	; 0x7a2 <__mulsf3_pse+0x82>
 7ac:	86 95       	lsr	r24
 7ae:	77 95       	ror	r23
 7b0:	67 95       	ror	r22
 7b2:	b7 95       	ror	r27
 7b4:	f7 95       	ror	r31
 7b6:	e7 95       	ror	r30
 7b8:	9f 5f       	subi	r25, 0xFF	; 255
 7ba:	c1 f7       	brne	.-16     	; 0x7ac <__mulsf3_pse+0x8c>
 7bc:	fe 2b       	or	r31, r30
 7be:	88 0f       	add	r24, r24
 7c0:	91 1d       	adc	r25, r1
 7c2:	96 95       	lsr	r25
 7c4:	87 95       	ror	r24
 7c6:	97 f9       	bld	r25, 7
 7c8:	08 95       	ret

000007ca <__fp_inf>:
 7ca:	97 f9       	bld	r25, 7
 7cc:	9f 67       	ori	r25, 0x7F	; 127
 7ce:	80 e8       	ldi	r24, 0x80	; 128
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	08 95       	ret

000007d6 <__fp_nan>:
 7d6:	9f ef       	ldi	r25, 0xFF	; 255
 7d8:	80 ec       	ldi	r24, 0xC0	; 192
 7da:	08 95       	ret

000007dc <__fp_pscA>:
 7dc:	00 24       	eor	r0, r0
 7de:	0a 94       	dec	r0
 7e0:	16 16       	cp	r1, r22
 7e2:	17 06       	cpc	r1, r23
 7e4:	18 06       	cpc	r1, r24
 7e6:	09 06       	cpc	r0, r25
 7e8:	08 95       	ret

000007ea <__fp_pscB>:
 7ea:	00 24       	eor	r0, r0
 7ec:	0a 94       	dec	r0
 7ee:	12 16       	cp	r1, r18
 7f0:	13 06       	cpc	r1, r19
 7f2:	14 06       	cpc	r1, r20
 7f4:	05 06       	cpc	r0, r21
 7f6:	08 95       	ret

000007f8 <__fp_round>:
 7f8:	09 2e       	mov	r0, r25
 7fa:	03 94       	inc	r0
 7fc:	00 0c       	add	r0, r0
 7fe:	11 f4       	brne	.+4      	; 0x804 <__fp_round+0xc>
 800:	88 23       	and	r24, r24
 802:	52 f0       	brmi	.+20     	; 0x818 <__fp_round+0x20>
 804:	bb 0f       	add	r27, r27
 806:	40 f4       	brcc	.+16     	; 0x818 <__fp_round+0x20>
 808:	bf 2b       	or	r27, r31
 80a:	11 f4       	brne	.+4      	; 0x810 <__fp_round+0x18>
 80c:	60 ff       	sbrs	r22, 0
 80e:	04 c0       	rjmp	.+8      	; 0x818 <__fp_round+0x20>
 810:	6f 5f       	subi	r22, 0xFF	; 255
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	8f 4f       	sbci	r24, 0xFF	; 255
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	08 95       	ret

0000081a <_exit>:
 81a:	f8 94       	cli

0000081c <__stop_program>:
 81c:	ff cf       	rjmp	.-2      	; 0x81c <__stop_program>
